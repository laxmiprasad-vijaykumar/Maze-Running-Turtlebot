#!/usr/bin/env python3
import rospy
from geometry_msgs.msg import Twist, Quaternion
from nav_msgs.msg import Odometry
from sensor_msgs.msg import LaserScan
from turtlesim.msg import Pose
import numpy as np
import tf
from math import pow, atan2, sqrt, pi, isinf, inf, acos
import math
from enum import Enum

class States(Enum):
    driving = 1
    drivingBlind = 2
    rotating = 3

class MazeRunner:

    def __init__(self):
        # Creates node
        rospy.init_node('mazerunner', anonymous=True)

        # Publisher which will publish to the topic '/turtle1/cmd_vel'.
        self.velocity_publisher = rospy.Publisher('/cmd_vel', Twist, queue_size=10)

        # Subscribe to odometry and laserscans
        self.pose_subscriber = rospy.Subscriber('/odom', Odometry, self.update_odom)
        self.pose_subscriber = rospy.Subscriber('/scan', LaserScan, self.update_scan)

        self.rate = rospy.Rate(10)

    def update_odom(self, data):
        # Callback function which is called when a new message of type Pose is
        # received by the subscriber.
        self.odom = data

    def update_scan(self, data):
        # Callback function which is called when a new message of type Pose is
        # received by the subscriber.
        self.scan = data

    def is_front_free(self, tolerance):
        front_angles = [i for i, angle in enumerate(self.scan.angle_min + i * self.scan.angle_increment for i in range(len(self.scan.ranges))) if -0.17 <= angle <=0.17]
        front_ranges = [self.scan.ranges[i] for i in front_angles if not math.isnan(self.scan.ranges[i])]
        
        front = min(front_ranges, default=0)
        return front > tolerance

    def is_left_free(self, tolerance):
        left_angles = [i for i, angle in enumerate(self.scan.angle_min + i * self.scan.angle_increment for i in range(len(self.scan.ranges))) if 1.4 <= angle <=1.74]
        left_ranges = [self.scan.ranges[i] for i in left_angles if not math.isnan(self.scan.ranges[i])]
        
        left = min(left_ranges, default=0)
        return left > tolerance

    def is_right_free(self, tolerance):
        right_angles = [i for i, angle in enumerate(self.scan.angle_min + i * self.scan.angle_increment for i in range(len(self.scan.ranges))) if 4.54 <= angle <= 4.89]
        right_ranges = [self.scan.ranges[i] for i in right_angles if not math.isnan(self.scan.ranges[i])]
        
        right = min(right_ranges, default=0)
        return right > tolerance

    def qv_mult(self, q1, v1):
        v1 = tf.transformations.unit_vector(v1);
        q2 = list(v1)
        q2.append(0.0)
        return tf.transformations.quaternion_multiply(
            tf.transformations.quaternion_multiply(q1,q2),
            tf.transformations.quaternion_conjugate(q1)
        )

    def qq_rotation_projected_xy_degrees(self, q1, q2):
        # Calculates the rotation angle (in degrees) between two quaternions,
        # in their projection on the X-Y-plane (q1 = target, q2 = current)
        axis = np.array([0.0, 1.0, 0.0])
        vecA = self.qv_mult(q1, axis)
        vecB = self.qv_mult(q2, axis)
        angleA = atan2(vecA[0], vecA[1]) * 180 / pi
        angleB = atan2(vecB[0], vecB[1]) * 180 / pi
        return self.delta_angle_degrees(angleA, angleB)

    def delta_angle_degrees(self, a1, a2):
        # Calculates the difference between two rotation angles and ensures wrapping
        delta = (a2-a1) % 360.0
        if delta > 180:
            delta -= 360
        return delta
    

    def movement(self):
        vel_msg = Twist()

        # Wait for odometry and scan data
        rospy.loginfo('Waiting for odometry & scan...')
        while not (hasattr(self, 'odom') and hasattr(self, 'scan')) and not rospy.is_shutdown():
            self.rate.sleep()
        rospy.loginfo('Data received, starting navigation')

        # Init-phase parameters
        counter     = 0
        v_forward   = 0.1    # forward speed
        v_forward_fast = 0.2    # forward speed
        omega_init  = 0.1   # small rotation speed for init
        omega_max   = 0.25   # reduced max rotation speed for less overshoot
        d_tol       = 0.002  # orientation tolerance
        wall_found  = False
        initialized = False

        # PD-only parameters in movement
        e_sum_d     = 0.0
        last_err    = 0.0
        last_phi    = 0.0   # for derivative of orientation error
        dt          = 1.0 / 10.0   # loop period (s)
        # Separate gains for distance and orientation
        Kp_dist     = 0.5   # proportional gain for distance
        Kp_phi      = 0.2   # proportional gain for orientation
        Kd_dist     = 0.0   # derivative gain for distance (turned off)
        Kd_phi      = 0.2   # derivative gain for orientation
        d_des       = 0.25   # desired lateral distance
        d_max       = 0.6   # outlier threshold
        omega_max   = 0.2  # further reduced max rotation speed         # outlier threshold
        Kp_phi      = 0.2       # orientation gain         # outlier threshold      # outlier threshold
        phi_err_last = 0
        # Corner detection threshold
        corner_thresh = 0.6

        # Main loop
        while self.odom.pose.pose.position.x < 11.7 and not rospy.is_shutdown():
            front = self.is_front_free(0.3)
            front_far = self.is_front_free(0.4)
            left  = self.is_left_free(0.4)
            right = self.is_right_free(0.3)

            # Debug every 10 cycles
            counter += 1
            if counter >= 10:
                print(f"left:{left}, front:{front}, right:{right}")
                counter = 0

            # Initialization: find and align to left wall
            if not initialized:
                # 1) drive until any wall
                if front and left and right and not wall_found:
                    vel_msg.linear.x  = v_forward
                    vel_msg.angular.z = 0.0
                # 2) rotate until left wall appears
                elif left:
                    wall_found = True
                    vel_msg.linear.x  = 0.0
                    vel_msg.angular.z = -3 * omega_init
                # 3) align parallel using beams 75-105
                else:
                    wall_found = True
                    vel_msg.linear.x = 0.0
                    def avg_beams(s,e):
                        vals = []
                        for deg in range(s,e+1):
                            theta = math.radians(deg)
                            idx   = int((theta - self.scan.angle_min)/self.scan.angle_increment)
                            if 0<=idx<len(self.scan.ranges):
                                r = self.scan.ranges[idx]
                                if not (math.isnan(r) or math.isinf(r)):
                                    vals.append(r)
                        return sum(vals)/len(vals) if vals else 0.0
                    d1 = avg_beams(75,90)
                    d2 = avg_beams(90,105)
                    if abs(d1-d2) < d_tol:
                        initialized = True
                        vel_msg.angular.z = 0.0
                        rospy.loginfo('Init complete: parallel to left wall')
                    else:
                        vel_msg.angular.z = omega_init if d1>d2 else -omega_init
                self.velocity_publisher.publish(vel_msg)
                self.rate.sleep()
                continue

            # Main logic after init
            # 1) left turn
            if left:
                rospy.loginfo(f"Turning left error: {phi_err}")
                # pre-drive into corner before turning
                start_t = rospy.Time.now().to_sec()
                pre_drive_time = 1.0  # seconds into the intersection
                while not rospy.is_shutdown() and (rospy.Time.now().to_sec() - start_t) < pre_drive_time:
                    vel_msg.linear.x  = v_forward
                    vel_msg.angular.z = 0.0
                    self.velocity_publisher.publish(vel_msg)
                    self.rate.sleep()

                delta_turn = math.pi/2 + phi_err_last

                q = self.odom.pose.pose.orientation
                q_start = np.array([q.x,q.y,q.z,q.w])
                q_delta = tf.transformations.quaternion_from_euler(0,0,delta_turn)
                q_target = tf.transformations.quaternion_multiply(q_delta,q_start)
                while not rospy.is_shutdown():
                    qn = self.odom.pose.pose.orientation
                    q_now = np.array([qn.x,qn.y,qn.z,qn.w])
                    delta = self.qq_rotation_projected_xy_degrees(q_target,q_now)
                    if abs(delta)<2: 
                        break
                    vel_msg.linear.x=0.0
                    vel_msg.angular.z=math.copysign(omega_max,delta)
                    self.velocity_publisher.publish(vel_msg)
                    self.rate.sleep()
                while self.is_left_free(0.4):
                    vel_msg.linear.x=v_forward
                    vel_msg.angular.z=0.0
                    self.velocity_publisher.publish(vel_msg)
                    self.rate.sleep()
                continue

            # 2) straight with PD
            elif front:
                # Corner detection during straight: switch to unregulated straight drive
                theta_c = math.radians(80)
                idx_c = int((theta_c - self.scan.angle_min) / self.scan.angle_increment)
                rc = float('inf')
                if 0 <= idx_c < len(self.scan.ranges):
                    rv = self.scan.ranges[idx_c]
                    if not (math.isnan(rv) or math.isinf(rv)):
                        rc = rv
                if rc > corner_thresh:
                    rospy.loginfo('Corner during straight: unregulated drive')
                    # drive straight until left wall found
                    while not self.is_left_free(0.4) and not rospy.is_shutdown():
                        vel_msg.linear.x  = v_forward
                        vel_msg.angular.z = 0.0
                        self.velocity_publisher.publish(vel_msg)
                        self.rate.sleep()
                    continue
                # Driving straight with regulated PD wall-follow
                rospy.loginfo('Driving straight with line-fit PD-controller')
                # Collect points (x,y) in left sector for line fit (80°–100°)
                xs, ys = [], []
                for deg in range(80, 100):
                    theta = math.radians(deg)
                    idx = int((theta - self.scan.angle_min) / self.scan.angle_increment)
                    if 0 <= idx < len(self.scan.ranges):
                        r = self.scan.ranges[idx]
                        if not (math.isnan(r) or math.isinf(r)) and r <= d_max:
                            xs.append(r * math.cos(theta))
                            ys.append(r * math.sin(theta))
                # Fit line y = m*x + b if enough points
                if len(xs) >= 2:
                    x_mean = sum(xs) / len(xs)
                    y_mean = sum(ys) / len(ys)
                    num = sum((x - x_mean)*(y - y_mean) for x, y in zip(xs, ys))
                    den = sum((x - x_mean)**2 for x in xs)
                    m = num/den if den != 0 else 0.0
                    b = y_mean - m*x_mean
                    # perpendicular distance to wall
                    d_perp = abs(b) / math.sqrt(m*m + 1)
                    # orientation error (rad), relative to 90°
                    phi_err = math.atan(m)
                    phi_err_last = phi_err
                else:
                    d_perp = d_des
                    phi_err = 0.0
                # PD control decoupled
                error_dist = d_perp - d_des
                de_dist = (error_dist - last_err) / dt
                last_err = error_dist
                dphi = (phi_err - last_phi) / dt
                last_phi = phi_err
                omega = Kp_dist * error_dist + Kp_phi * phi_err + Kd_dist * de_dist + Kd_phi * dphi
                omega = max(min(omega, omega_max), -omega_max)
                rospy.loginfo(f"d_err={error_dist:.3f}, phi={phi_err:.3f}, omega={omega:.3f}")
                vel_msg.linear.x  = v_forward
                vel_msg.angular.z = omega
                self.velocity_publisher.publish(vel_msg)
                self.rate.sleep()
                continue

            # 3) right turn
            elif right:
                rospy.loginfo(f"Turning right error: {phi_err_last}")
                delta_turn = -math.pi/2 + phi_err_last

                q = self.odom.pose.pose.orientation
                q_start = np.array([q.x,q.y,q.z,q.w])
                q_delta = tf.transformations.quaternion_from_euler(0,0,delta_turn)
                q_target = tf.transformations.quaternion_multiply(q_delta,q_start)
                while not rospy.is_shutdown():
                    qn=self.odom.pose.pose.orientation
                    q_now=np.array([qn.x,qn.y,qn.z,qn.w])
                    delta=self.qq_rotation_projected_xy_degrees(q_target,q_now)
                    if abs(delta)<2: break
                    vel_msg.linear.x=0.0
                    vel_msg.angular.z=math.copysign(omega_max,delta)
                    self.velocity_publisher.publish(vel_msg)
                    self.rate.sleep()
                continue

            # 4) dead-end U-turn
            else:
                rospy.loginfo('U-turn')
                delta_turn = math.pi/2 + phi_err_last

                q=self.odom.pose.pose.orientation
                q_start=np.array([q.x,q.y,q.z,q.w])
                q_delta=tf.transformations.quaternion_from_euler(0,0,delta_turn)
                q_target=tf.transformations.quaternion_multiply(q_delta,q_start)
                while not rospy.is_shutdown():
                    qn=self.odom.pose.pose.orientation
                    q_now=np.array([qn.x,qn.y,qn.z,qn.w])
                    delta=self.qq_rotation_projected_xy_degrees(q_target,q_now)
                    if abs(delta)<2: break
                    vel_msg.linear.x=0.0
                    vel_msg.angular.z=math.copysign(omega_max,delta)
                    self.velocity_publisher.publish(vel_msg)
                    self.rate.sleep()
                continue

        # stop
        print('Reached maze exit')
        vel_msg.linear.x=0.0
        vel_msg.angular.z=0.0
        self.velocity_publisher.publish(vel_msg)
        rospy.sleep(1)

if __name__ == '__main__':
    try:
        x = MazeRunner()
        x.movement()
    except rospy.ROSInterruptException:
        pass
